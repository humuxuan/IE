width = 8,
collapsible = T,
collapsed = F,
tags$p(textOutput("serving", inline = T)),
div(DT::DTOutput("nutrient_table"), style = "font-size: 100%;"))
),
fluidRow(
box(title = "Macronutrients", solidHeader = T,
color = "light-blue",
width = 12, collapsible = T,
plotlyOutput("macro_plot"))
),
fluidRow(
box(title = "Servings", solidHeader = T,
color = 'light-blue',
width = 6, collapsible = T,
plotlyOutput('Servings_plot'))
)
)
)
server <- function(input, output, session){
# make reactive to store ingredients
ing_df <- shiny::reactiveValues()
ing_df$df <- data.frame("quantity" = numeric(),
"Measurement" = character(),
"Name" = character(),
"Category" = character(),
stringsAsFactors = F)
ing_df$measure <- data.frame(
"Name" = character(),
"KJ_Per_mea"=numeric(),
"Protein" = numeric(),
"Fat" = numeric(),
"Sat.Fat" = numeric(),
"Fiber" = numeric(),
"Carbs" = numeric(),
stringsAsFactors = F)
# display nutrients necessary for label
nutrition_df = eventReactive(input$food,{
mydb <- dbConnect(MySQL(), dbname = dbname,user = user,password = password ,host = host, port = port)
# create find sql
find_sql = creat_query(input$food)
find_nutuition = dbSendQuery(mydb, find_sql)
nutrition_df = dbFetch(find_nutuition)
dbClearResult(find_nutuition)
# 鏈夎叮鐨勯棶棰?
nutrition_df
}
)
# step 2 update the measure unit for singular ingredient
observe({
units <- unique(paste(nutrition_df()$Measurement ))
updateSelectInput(session, "measure_unit", "Measure Unit", choices = units)
})
# step 3 update the ingredient dataframe
observeEvent(input$remove, {
isolate(ing_df$df<-ing_df$df[-(nrow(ing_df$df)),])
isolate(ing_df$measure <- ing_df$measure[-nrow(ing_df$measure),])
#print(ing_df$measure)
})
observeEvent(input$add, {
temp = nutrition_df()$Category
isolate(ing_df$df[nrow(ing_df$df) + 1,] <- c(input$quantity,
input$measure_unit,
input$food,
temp
))
# get actual working ingredient dataframe for dplyr
input_measure <- nutrition_df()[,c(2,4,5,6,7,8,9)]
isolate(ing_df$measure[nrow(ing_df$measure) + 1, ] <- input_measure)
#print(typeof(ing_df$measure))
# update choices
updateNumericInput(session, 'quantity', 'Quantity', 1)
updateSelectizeInput(session, 'measure_unit', 'Measure Unit')
#updateSelectInput(session, 'food', 'Ingredient', choices = food_name)
})
# calcualte the main nutuirtion
sum_nutrition <- reactive({
measure_food_df <- ing_df$measure
temp_df = ing_df$df
measure_food_df$quantity <- temp_df$quantity
# claculate the sum of the nutrition for servings
measure_food_df = measure_food_df %>%
mutate(
KJ = as.numeric(KJ_Per_mea) * as.numeric(quantity) / input$serving,
Protein = as.numeric(Protein) * as.numeric(quantity) / input$serving,
Fat = as.numeric(Fat) * as.numeric(quantity)/input$serving,
Sat.Fat = as.numeric(Sat.Fat)* as.numeric(quantity)/input$serving,
Fiber = as.numeric(Fiber) * as.numeric(quantity)/input$serving,
Carbs = as.numeric(Carbs) * as.numeric(quantity)/input$serving
)
# add all the nutrition together
nutrition = mapply(sum, measure_food_df[,-c(1,2,8)])
new_df <-  matrix(nutrition,nrow=1,ncol=6,byrow=TRUE)
colnames(new_df) <- c("Protein", "Fat", "Sat.Fat", "Fiber", "Carbs","KJ")
new_df
})
# calculate the service for them in one day
sum_service <- reactive({
temp_df <- ing_df$df %>% select(quantity, Category)
sum_df = as.data.frame(matrix(nrow=0,ncol=2))
colnames(sum_df) = c('type', 'x')
if (nrow(temp_df) >=1){
sum_df <- aggregate(as.numeric(temp_df$quantity), by=list(type = temp_df$Category),sum)
}
#print(sum_df$type)
sum_df
})
# output the value
# plot the KJ
# value boxes
output$calories <- renderValueBox({
valueBox(paste0(sum_nutrition()[,c(6)], "kcal"),
"Calories", icon = icon("fire"), color = "yellow")
})
#  plot ingredients and nutrition table
output$ing_df <- DT::renderDataTable(ing_df$df,
colnames = c("Quantity", "Units", "Ingredient"),
rownames=F, options = list(pageLength = 5))
output$nutrient_table <- DT::renderDataTable(sum_nutrition())
# plot the histogram for all the nutrition---> macro_plot
output$macro_plot <- renderPlotly({
macro_name =  c("Protein", "Fat", "Sat.Fat", "Fiber",  "Carbs")
macro_ingredient <- sum_nutrition()[,-c(6)]
macro_df = cbind.data.frame(macro_name,macro_ingredient)
# use ggplot
macro_plot = ggplot(macro_df,aes(macro_name,macro_ingredient))+
geom_bar(stat = "identity",fill =c("#9933FF",
"#33FFFF",
"red",
"darkblue",
'pink'))+
ggtitle("nutuirtion occupy")
macro_plot
})
# plot the par chart
output$Servings_plot <- renderPlotly(
{
temp_Serving =sum_service()%>% select(type, x)
fig <- temp_Serving %>% plot_ly(labels = ~type, values = ~x)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "The proprtion for each food type",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("readxl")
recommend_service = read_excel('service.xlsx')
library("readxl")
recommend_service = read_excel('service.xlsx')
recommend_service
filter(recommend_service,Type = 'Female')
filter(recommend_service,Type == 'Female')
line_bar -> recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance))+geom_line(linetype = "dashed", color="red")+geom_point()
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance))+geom_line(linetype = "dashed", color="red")+geom_point()
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance))+geom_line(linetype = "dashed", color="red")
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance, group = 1))+geom_line(linetype = "dashed", color="red")
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance, group = 1))+geom_line(linetype = "dashed", color="red")
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance, group = 1))+geom_line(linetype = "dashed", color="red")
line_bar
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>% ggplot(aes(x = Food, y=Distance, group = 1))+geom_line(linetype = "dashed", color="red",size=3)
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>%
ggplot(aes(x = Food, y=Distance, group = 1))+
geom_line(linetype = "dashed", color="red",size=2)
line_bar
line_bar = recommend_service %>% filter(Type =='Female') %>%
ggplot(aes(x = Food, y=Distance, group = 1))+
geom_line(linetype = "dashed", color="red",size=2)
line_bar
recommend_service = read_excel('service.xlsx')
test_service = read_excel('service.xlsx')
line_bar = recommend_service %>% filter(Type =='Female') %>%
ggplot(aes(x = Food, y=Distance, group = 1))+
geom_line(linetype = "dashed", color="red",size=2)
+geom_point(color="red", size=3)
line_bar = recommend_service %>% filter(Type =='Female') %>%
ggplot(aes(x = Food, y=Distance, group = 1))+
geom_line(linetype = "dashed", color="red",size=2)
test = line_bar + geom_bar(recommend_service %>% filter(Type =='Female'),aes(Food, Distance), stat = "identity")
test = line_bar + geom_bar(recommend_service %>% filter(Type =='Female'),aes=(Food, Distance), stat = "identity")
test = line_bar + geom_bar(recommend_service %>% filter(Type =='Female'),aes=(x = Food, y=Distance), stat = "identity")
data = recommend_service %>% filter(Type =='Female')
test = line_bar + geom_bar(data,aes(Food, Distance), stat = "identity")
test = line_bar + geom_bar(data,aes=(Food, Distance), stat = "identity")
test = line_bar + geom_bar(data,aes=(x = Food, y=Distance), stat = "identity")
test = line_bar + geom_bar(data,state = "identity")
test
test = line_bar + geom_bar(data,aes(x = Food))
test = line_bar + geom_bar(data,aes(x = Food,y=Distance))
df = recommend_service %>% filter(Type =='Female')
test = line_bar + geom_bar(df,aes(x = Food,y=Distance))
test =geom_bar(df,aes(x = Food,y=Distance))
View(df)
test =geom_bar(df,mapping=aes(x = Food,y=Distance))
test
test =geom_bar(df,mapping=aes(x = ~Food,y=~Distance))
test
test =geom_bar(df,mapping=aes(x = df$Food,y= dfDistance))
test
df = recommend_service %>% filter(Type =='Female')
ds =recommend_service %>% filter(Type =='Female')
ggplot() +
geom_line(data = df, aes(x = Food, y = Distande)) + # must include argument label "data"
geom_bar(data = ds, aes(x = Food, y = Distande))
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance)) + # must include argument label "data"
geom_bar(data = ds, aes(x = Food, y = Distance))
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance)) + # must include argument label "data"
geom_bar(data = ds, aes(x = Food, y = Distance),stat="identity")
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1)) + # must include argument label "data"
geom_bar(data = ds, aes(x = Food, y = Distance),stat="identity")
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1)) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance),stat="identity")
test
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance),stat="identity")
test
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food),stat="identity")
test
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=language),stat="identity",alpha=0.2)
ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
test
p = ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
ggplotly(p)
ggplotly(p, hovertemplate = paste('%{x}', '<br>lifeExp: %{text:.2s}<br>'))
plot_ly(p, hovertemplate = paste('%{x}', '<br>lifeExp: %{text:.2s}<br>'))
ggplotly(p)
p = ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
ggplotly(p, tooltip = c('Distance'))
ggplotly(p, tooltip = c('Food','Distance'))
p
p
p = ggplot(label = Food) +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
p = ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
ggplotly(p, tooltip = c('Distance'))
ds = ds[c(1,5),]
View(ds)
p = ggplot() +
geom_line(data = df, aes(x = Food, y = Distance,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Distance,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Distance,fill = Food,color=Food),stat="identity",alpha=0.2)
ggplotly(p, tooltip = c('Distance'))
recommend_service = read_excel('service.xlsx')
test_service = read_excel('service.xlsx')
df = recommend_service %>% filter(Type =='Female')
ds =recommend_service %>% filter(Type =='Female')
ds = ds[c(1,5),]
p = ggplot() +
geom_line(data = df, aes(x = Food, y = Serving,group = 1),color="red",size=2) +
geom_point(data =df, aes(x = Food, y = Serving,group = 1))+
geom_bar(data = ds, aes(x = Food, y = Serving,fill = Food,color=Food),stat="identity",alpha=0.2)
ggplotly(p, tooltip = c('Serving'))
# read food file contain recommeded servings
recommend_service = read_excel('service.xlsx')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('D:/FIT5120/Calores')
shiny::runApp()
runApp()
shiny::runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp()
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
runApp('D:/FIT5120/Calores')
shiny::runApp('D:/FIT5120/Calores')
